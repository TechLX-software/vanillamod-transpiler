/* stylelint-disable docusaurus/copyright-header */

.editorHeader {
  height: 5em;
  align-items: center;
  justify-content: space-between;
}

// let overlayDom = document.createElement('div');
//     overlayDom.id = 'overlayId';
//     overlayDom.style.width = '100%';

//     // https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.ioverlaywidget.html
//     let overlayWidget = {
//       getId: () => `overlayWidget${JSON.stringify(error.location)}`,
//       getDomNode: () => overlayDom,
//       getPosition: () => null
//     };
//     editor.addOverlayWidget(overlayWidget);

//     let belowCodeZone = document.createElement('div');
//     let gutterZone = document.createElement('div');
//     gutterZone.style.paddingTop = "10px"
//     let viewZoneRemover;

//     editor.changeViewZones( (changeAccessor) => {
//       const viewZoneId = changeAccessor.addZone({
//         afterLineNumber: 4,
//         heightInLines: 3,
//         domNode: belowCodeZone,
//         marginDomNode: gutterZone,
//         onDomNodeTop: top => {
//           overlayDom.style.top = top + "px";
//         },
//         onComputedHeight: height => {
//           overlayDom.style.height = height + "px";
//         }
//       });

//       //this is what we're working on
//       //leave this alone, post question asking how to
//       //forceably expand the "peek problem"
//       // look into https://microsoft.github.io/monaco-editor/api/modules/monaco.editor.html#getmodelmarkers
//       viewZoneRemover = () => {
//         changeAccessor.removeZone(viewZoneId)
//         editor.removeOverlayWidet(overlayWidget)
//       }
//       ReactDOM.render(<GutterBadge />, gutterZone)
//       ReactDOM.render(<UnderCodeError message={error.message} removeZone={viewZoneRemover}/>, overlayDom)
//     })

//     console.log("and height", belowCodeZone.style.height)

// const liveMarkers = monacoAlive.editor.getModelMarkers();
//       const codeActions = monacoAlive.languages.provideCodeActions(
//         editorRef.current.getModel(),
//         editorRef.current.getModel().getFullModelRange(),
//         { markers: liveMarkers },
//         (e) => { console.log("cancellation token", e) }
//       )

//       console.log("current actions:", codeActions)
